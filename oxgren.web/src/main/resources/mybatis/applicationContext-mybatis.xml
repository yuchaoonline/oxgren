<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd

">

    <bean name="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <!--<property name="location" value="jdbc.properties"/>-->
        <property name="location" value="mybatis/javaniu.properties"/>
    </bean>
    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_user}"/>
        <property name="password" value="${jdbc_password}"/>


        &lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>
        &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;
        <property name="maxWait" value="60000"/>

        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        &lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        &lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;
        <property name="filters" value="stat"/>
    </bean>
-->


    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${datasource.connection.driver_class}" />
        <property name="jdbcUrl" value="${datasource.connection.url}" />
        <property name="user" value="${datasource.connection.username}" />
        <property name="password" value="${datasource.connection.password}" />
        <property name="minPoolSize" value="${datasource.connection.minPoolSize}" />
        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="${datasource.connection.maxPoolSize}" />
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="${datasource.connection.maxIdleTime}" />
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="${datasource.connection.acquireIncrement}" />
        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
            如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
        <property name="maxStatements" value="${datasource.connection.maxStatements}" />
        <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
        <property name="maxStatementsPerConnection"
                  value="${datasource.connection.maxStatementsPerConnection}" />
        <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="${datasource.connection.initialPoolSize}" />
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod"
                  value="${datasource.connection.idleConnectionTestPeriod}" />
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts"
                  value="${datasource.connection.acquireRetryAttempts}" />
        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
            获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
        <property name="breakAfterAcquireFailure"
                  value="${datasource.connection.breakAfterAcquireFailure}" />
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
            等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout"
                  value="${datasource.connection.testConnectionOnCheckout}" />
        <property name="checkoutTimeout" value="${datasource.connection.checkoutTimeout}" />
        <property name="testConnectionOnCheckin"
                  value="${datasource.connection.testConnectionOnCheckin}" />
        <property name="automaticTestTable" value="${datasource.connection.automaticTestTable}" />
        <property name="acquireRetryDelay" value="${datasource.connection.acquireRetryDelay}" />
    </bean>

    <!--配置 Mybatis的sqlSessionFactory  -->
    <bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--configLocation属性指定mybatis的核心配置文件-->
        <property name="configLocation" value="classpath:mybatis/MyBatis-Configuration.xml"/>
    </bean>


    <!-- 配置一个父类的mapper
    <bean name="baseMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"
            abstract="true" lazy-init="true">
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>

    <bean name="userMapper" parent="baseMapper">
        <property name="mapperInterface" value="spring.mybatis.mapper.UserMapper"/>
    </bean>
 -->

    <!--MapperScannerConfigurer 的方式,简化 Mapper的映射-->

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="mybatis"/>
        <property name="annotationClass" value="mybatis.annotation.MyBatisMapper"/>
    </bean>


    <!--sqlSessionTemplate完成注解
    <bean name="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" >
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    <context:component-scan base-package="spring.mybatis.dao" />
    -->
</beans>